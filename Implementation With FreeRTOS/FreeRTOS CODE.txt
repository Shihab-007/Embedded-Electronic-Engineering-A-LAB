#include <Arduino.h>
#include <vector>
#include <algorithm>
#include "freertos/FreeRTOS.h"
#include "freertos/task.h"

#define N 6

int blocks[4]; // 4 blocks in the cross section
int list[N + 1];
int len;
int nmbr_events;
int event;
int random_car;

String targetStatus; // for checking how many cars have the same status
int count = 0;       // for checking how many cars have the same status

String currentLoc;
String currentAc;
int actionSwitch;
String currentStatus;
int currentTiming;

class Car
{
private:
  int id;
  int priority;
  int timing;           // timing for cars: starts at 0 - at 1 is approaching - at 2 is either approaching or stops - at 3 is crossing or starting - at 4 leaves or crosses(if stop)
  String location;
  String action;
  String status;

public:
  Car(int carId) : status("Out of Range"), timing(0)
  {
    id = carId;
    priority = random(1, 4);

    // Randomly assign location
    int locationIndex = random(0, 4);
    switch (locationIndex)
    {
    case 0:
      location = "A";
      break;
    case 1:
      location = "B";
      break;
    case 2:
      location = "C";
      break;
    case 3:
      location = "D";
      break;
    }

    // Randomly assign action
    int actionIndex = random(0, 3);
    switch (actionIndex)
    {
    case 0:
      action = "Straight";
      break;
    case 1:
      action = "Left Turn";
      break;
    case 2:
      action = "Right Turn";
      break;
    }
  }

  void printCarInfo() const
  {
    Serial.println("Car ID: " + String(id));
    Serial.println("Priority: " + String(priority));
    Serial.println("Location: " + location);
    Serial.println("Action: " + action);
  }

  void printCarStatus() const
  {
    Serial.println("Car ID: " + String(id));
    Serial.println("priority: " + String(priority));
  }

  void printCarStatusOnly()
  {
    Serial.println("\nstatus: " + status + "\n");
  }

  void setCarStatus()
  {
    currentStatus = status;
  }

  void printCurrentStatus()
  {
    Serial.println("\nCurrentStatus: " + currentStatus + "\n");
  }

  void printcurrentTiming()
  {
    Serial.println("\nCurrentTiming: " + String(currentTiming) + "\n");
  }

  void setCarTiming() const
  {
    currentTiming = timing;
  }

  void timingAdvance()
  {
    timing = timing + 1;
  }

  void printTiming()
  {
    Serial.println("\nTiming of car: " + String(id) + "\n= " + String(timing));
  }

  void setCarInfo() const
  {
    currentAc = action;
    currentLoc = location;

    Serial.println("\nCurrentLoc = '" + currentLoc + "'\n");
  }

  int getID() const
  {
    return id;
  }

  void statusAdvance()
  {
    Serial.println("\nOld status: " + status);

    if (status == "Out of Range")
    {
      status = "Approaching";
    }
    else if (status == "Approaching")
    {
      status = "Stopping";
    }
    else if (status == "Stopping")
    {
      status = "Crossing";
    }
    else if (status == "Crossing")
    {
      status = "Leaving";
    }
    else if (status == "Leaving")
    {
      status = "Out of Range";
    }

    Serial.println("New status: " + status);
  }
};

std::vector<Car> cars;

void task1(void *pvParameters)
{
  while (1)
  {
    // Print car information
    for (const Car &car : cars)
    {
      car.printCarInfo();
      vTaskDelay(pdMS_TO_TICKS(1000));
    }
  }
}

void task2(void *pvParameters)
{
  while (1)
  {
    // Set the current car status and timing
    for (Car &car : cars)
    {
      car.setCarStatus();
      car.setCarTiming();
    }

    // Print the current status and timing
    for (Car &car : cars)
    {
      car.printCurrentStatus();
      car.printcurrentTiming();
    }

    // Advance timing for each car
    for (Car &car : cars)
    {
      car.timingAdvance();
    }

    // Print updated timing
    for (Car &car : cars)
    {
      car.printTiming();
    }

    // Advance status for each car
    for (Car &car : cars)
    {
      car.statusAdvance();
    }

    // Print updated status
    for (Car &car : cars)
    {
      car.printCarStatusOnly();
    }

    // Delay before next iteration
    vTaskDelay(pdMS_TO_TICKS(2000));
  }
}

void setup()
{
  Serial.begin(9600);

  // Initialize random seed
  randomSeed(analogRead(0));

  // Create 6 cars
  for (int i = 1; i <= N; i++)
  {
    cars.push_back(Car(i));
  }

  xTaskCreatePinnedToCore(task1, "Task1", 2048, NULL, 1, NULL, 0);
  xTaskCreatePinnedToCore(task2, "Task2", 2048, NULL, 1, NULL, 1);
}

void loop()
{
  // Empty loop as tasks handle the execution
}
