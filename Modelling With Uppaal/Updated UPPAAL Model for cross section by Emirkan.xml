<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>const int N=3;

int blocks[4];

int leftarr[N];
int rightarr[N];
int straightarr[N];

int prioritylow[N];
int prioritymid[N];
int priorityhigh[N];

int locA[N];
int locB[N];
int locC[N];
int locD[N];

int cango=0; //variable to check if car can cross or not

typedef int[0,N-1] id_t;

chan appr[N], leave[N], slow[N], stop[N], go[N], direction[N], stgo[N];</declaration>
	<template>
		<name x="5" y="5">Car</name>
		<parameter>const id_t id</parameter>
		<declaration>clock x;</declaration>
		<location id="id0" x="-25" y="-161">
			<name x="-68" y="-195">OutOfRange</name>
		</location>
		<location id="id1" x="-25" y="-102">
			<name x="-93" y="-136">approach</name>
			<label kind="invariant" x="-34" y="-93">x&lt;=1</label>
			<committed/>
		</location>
		<location id="id2" x="408" y="-161">
			<name x="398" y="-195">Cross</name>
			<label kind="invariant" x="391" y="-136">x&lt;=10</label>
		</location>
		<location id="id3" x="93" y="212">
			<name x="42" y="178">apprle</name>
			<label kind="invariant" x="93" y="178">x&lt;=10</label>
			<committed/>
		</location>
		<location id="id4" x="93" y="93">
			<name x="51" y="59">apprstr</name>
			<label kind="invariant" x="102" y="59">x&lt;=10</label>
			<committed/>
		</location>
		<location id="id5" x="93" y="-17">
			<name x="119" y="-59">apprri</name>
			<label kind="invariant" x="68" y="-51">x&lt;=10</label>
			<committed/>
		</location>
		<location id="id6" x="-42" y="93">
			<name x="-110" y="136">sendData</name>
			<label kind="invariant" x="-25" y="93">x&lt;=1</label>
			<committed/>
		</location>
		<location id="id7" x="221" y="102">
			<name x="136" y="111">firstSection</name>
			<label kind="invariant" x="145" y="128">x&lt;=15</label>
		</location>
		<location id="id8" x="476" y="102">
			<name x="493" y="119">Stop</name>
		</location>
		<location id="id9" x="510" y="-34">
			<name x="535" y="-51">Start</name>
			<label kind="invariant" x="527" y="-25">x&lt;=5</label>
		</location>
		<location id="id10" x="238" y="-161">
		</location>
		<init ref="id0"/>
		<transition>
			<source ref="id7"/>
			<target ref="id8"/>
			<label kind="synchronisation" x="340" y="110">stop[id]?</label>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id2"/>
			<label kind="synchronisation" x="272" y="-51">go[id]?</label>
			<label kind="assignment" x="246" y="-25">x:=0</label>
			<nail x="356" y="-92"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id10"/>
			<label kind="guard" x="289" y="-195">x&gt;=5</label>
			<label kind="synchronisation" x="272" y="-178">leave[id]!</label>
		</transition>
		<transition>
			<source ref="id10"/>
			<target ref="id0"/>
			<label kind="assignment" x="8" y="-272">x:=0,
leftarr[id]=0,straightarr[id]=0,
rightarr[id]=0,
locA[id]=0,locB[id]=0,locC[id]=0,locD[id]=0</label>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id6"/>
			<label kind="assignment" x="-323" y="42">locD[id]=1</label>
			<label kind="comments" x="-246" y="-17">D</label>
			<nail x="-306" y="-102"/>
			<nail x="-187" y="127"/>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id6"/>
			<label kind="assignment" x="-204" y="25">locC[id]=1</label>
			<label kind="comments" x="-187" y="-34">C</label>
			<nail x="-238" y="-102"/>
			<nail x="-127" y="85"/>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id6"/>
			<label kind="assignment" x="-127" y="8">locB[id]=1</label>
			<label kind="comments" x="-136" y="-68">B</label>
			<nail x="-179" y="-101"/>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id6"/>
			<label kind="assignment" x="-50" y="-4">locA[id]=1</label>
			<label kind="comments" x="-51" y="-68">A</label>
			<nail x="-59" y="-102"/>
		</transition>
		<transition>
			<source ref="id9"/>
			<target ref="id2"/>
			<label kind="guard" x="527" y="-136">x&gt;=1</label>
			<label kind="assignment" x="527" y="-102">x:=0</label>
			<nail x="518" y="-161"/>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id9"/>
			<label kind="synchronisation" x="510" y="17">stgo[id]?</label>
			<label kind="assignment" x="510" y="34">x:=0</label>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id7"/>
			<label kind="synchronisation" x="153" y="195">direction[id]!</label>
			<label kind="assignment" x="178" y="212">x:=0</label>
			<nail x="178" y="212"/>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id7"/>
			<label kind="synchronisation" x="111" y="80">direction[id]!</label>
			<label kind="assignment" x="127" y="93">x:=0</label>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id7"/>
			<label kind="synchronisation" x="111" y="25">direction[id]!</label>
			<label kind="assignment" x="144" y="8">x:=0</label>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id3"/>
			<label kind="guard" x="-8" y="238">x&gt;=0</label>
			<label kind="assignment" x="34" y="246">leftarr[id]=1</label>
			<nail x="0" y="170"/>
			<nail x="0" y="229"/>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id4"/>
			<label kind="guard" x="25" y="93">x&gt;=0</label>
			<label kind="assignment" x="25" y="119">straightarr[id]=1</label>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id5"/>
			<label kind="guard" x="0" y="0">x&gt;=0</label>
			<label kind="assignment" x="-8" y="-42">rightarr[id]=1</label>
			<nail x="-18" y="55"/>
			<nail x="-18" y="-21"/>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="synchronisation" x="-17" y="-153">appr[id]!</label>
			<label kind="assignment" x="8" y="-136">x:=0,
prioritylow[id]=1</label>
		</transition>
	</template>
	<template>
		<name>Section</name>
		<declaration>id_t list[N+1];
int[0,N] len;
int queuecount = 0;
int carcount = 0;


// Put an element at the end of the queue
void enqueue(id_t element)
{
        list[len++] = element;
        queuecount++;
}

// Remove the front element of the queue
void dequeue()
{
        int i = 0;
        len -= 1;
        while (i &lt; len)
        {
                list[i] = list[i + 1];
                i++;
        }
        list[i] = 0;
        queuecount -=1;
}

void approaching()
{
    carcount++;
}

void left()
{
    carcount--;
}

// Returns the front element of the queue
id_t front()
{
   return list[0];
}

// Returns the last element of the queue
id_t tail()
{
   return list[len - 1];
}

void occBlock(id_t element)
{
    if(locA[element] ==1) 
    {
        if(rightarr[element]==1) 
         {
                blocks[0]= 1;
         }
        if(straightarr[element]==1)
            {
                blocks[0]=1;
                blocks[2]=1;
            }
        if(leftarr[element]==1)
            {
                blocks[0]=1;
                blocks[2]=1;
                blocks[3]=1;
            }

    } 

    if(locB[element] ==1) 
    {
        if(rightarr[element]==1) 
         {
                blocks[3]= 1;
         }
        if(straightarr[element]==1)
            {
                blocks[3]=1;
                blocks[1]=1;
            }
        if(leftarr[element]==1)
            {
                blocks[0]=1;
                blocks[1]=1;
                blocks[3]=1;
            }
    }
    if(locC[element] ==1) 
    {
        if(rightarr[element]==1) 
         {
                blocks[1]= 1;
         }
        if(straightarr[element]==1)
            {
                blocks[0]=1;
                blocks[1]=1;
            }
        if(leftarr[element]==1)
            {
                blocks[0]=1;
                blocks[2]=1;
                blocks[1]=1;
            }
    }
    if(locD[element] ==1) 
    {
        if(rightarr[element]==1) 
         {
                blocks[2]= 1;
         }
        if(straightarr[element]==1)
            {
                blocks[2]=1;
                blocks[3]=1;
            }
        if(leftarr[element]==1)
            {
                blocks[3]=1;
                blocks[2]=1;
                blocks[1]=1;
            }

    } 
 
}


void carleft(id_t element)
{
        if(locA[element] ==1) 
    {
        if(rightarr[element]==1) 
         {
                blocks[0]= 0;
         }
        if(straightarr[element]==1)
            {
                blocks[0]=0;
                blocks[2]=0;
            }
        if(leftarr[element]==1)
            {
                blocks[0]=0;
                blocks[2]=0;
                blocks[3]=0;
            }

    } 

    if(locB[element] ==1) 
    {
        if(rightarr[element]==1) 
         {
                blocks[3]= 0;
         }
        if(straightarr[element]==1)
            {
                blocks[3]=0;
                blocks[1]=0;
            }
        if(leftarr[element]==1)
            {
                blocks[0]=0;
                blocks[1]=0;
                blocks[3]=0;
            }
    }
    if(locC[element] ==1) 
    {
        if(rightarr[element]==1) 
         {
                blocks[1]= 0;
         }
        if(straightarr[element]==1)
            {
                blocks[0]=0;
                blocks[1]=0;
            }
        if(leftarr[element]==1)
            {
                blocks[0]=0;
                blocks[2]=0;
                blocks[1]=0;
            }
    }
    if(locD[element] ==1) 
    {
        if(rightarr[element]==1) 
         {
                blocks[2]= 0;
         }
        if(straightarr[element]==1)
            {
                blocks[2]=0;
                blocks[3]=0;
            }
        if(leftarr[element]==1)
            {
                blocks[3]=0;
                blocks[2]=0;
                blocks[1]=0;
            }

    } 

}


void check(id_t element)
{
        if(locA[element] ==1) 
    {
        if(rightarr[element]==1) 
         {
                if(blocks[0]==0)
                { 
                    cango =1;
                } 
                else{
                    cango=0;
                }
         }
        if(straightarr[element]==1)
            {
                if(blocks[0]==0&amp;&amp;blocks[2]==0)
                {
                    cango=1;
                }
                else{
                    cango=0;
                }
            }
        if(leftarr[element]==1)
            {
                if(blocks[0]==0&amp;&amp;blocks[2]==0 &amp;&amp; blocks[3]==0)
                {
                    cango=1;
                }
                else{
                    cango=0;
                }
            }

    } 

    if(locB[element] ==1) 
    {
        if(rightarr[element]==1) 
         {
                if(blocks[3]==0)
                {
                    cango=1;
                }
                else{
                    cango=0;
                }
         }
        if(straightarr[element]==1)
            {
                if(blocks[3]==0&amp;&amp;blocks[1]==0)
                {
                    cango=1;
                }
                else{
                    cango=0;
                }
            }
        if(leftarr[element]==1)
            {
                if(blocks[0]==0&amp;&amp;blocks[1]==0&amp;&amp;blocks[3]==0)
                {
                    cango=1;
                }
                else{
                    cango=0;
                }
            }
    }
    if(locC[element] ==1) 
    {
        if(rightarr[element]==1) 
         {
                if(blocks[1]==0)
                {
                    cango=1;
                }
                else{
                    cango=0;
                }
         }
        if(straightarr[element]==1)
            {
                if(blocks[0]==0&amp;&amp;blocks[1]==0)
                {
                    cango=1;
                }
                else{
                    cango=0;
                }
            }
        if(leftarr[element]==1)
            {
                if(blocks[0]==0&amp;&amp;blocks[2]==0 &amp;&amp; blocks[1]==0)   
                {
                    cango=1;
                }
                else{
                    cango=0;
                }
            }
    }
    if(locD[element] ==1) 
    {
        if(rightarr[element]==1) 
         {
                if(blocks[2]==0)
                {
                    cango=1;
                }
                else{
                    cango=0;
                }
         }
        if(straightarr[element]==1)
            {
                if(blocks[3]==0&amp;&amp;blocks[2]==0)
                {
                    cango=1;
                }
                else{
                    cango=0;
                }
            }
        if(leftarr[element]==1)
            {
                if(blocks[1]==0&amp;&amp;blocks[2]==0&amp;&amp;blocks[3]==0) 
                {
                    cango=1;
                }
                else{
                    cango=0;
                }
            }

    } 

}</declaration>
		<location id="id11" x="-119" y="-25">
			<name x="-127" y="-59">Free</name>
		</location>
		<location id="id12" x="-119" y="76">
		</location>
		<location id="id13" x="-119" y="153">
		</location>
		<location id="id14" x="-119" y="238">
			<name x="-195" y="204">PartialOCC</name>
		</location>
		<location id="id15" x="-119" y="297">
			<committed/>
		</location>
		<location id="id16" x="-119" y="365">
			<urgent/>
		</location>
		<location id="id17" x="-119" y="433">
			<name x="-178" y="425">Check</name>
			<urgent/>
		</location>
		<location id="id18" x="-348" y="-25">
			<urgent/>
		</location>
		<location id="id19" x="-348" y="68">
			<urgent/>
		</location>
		<location id="id20" x="-416" y="136">
			<urgent/>
		</location>
		<location id="id21" x="-297" y="136">
			<urgent/>
		</location>
		<init ref="id11"/>
		<transition>
			<source ref="id11"/>
			<target ref="id14"/>
			<label kind="guard" x="-594" y="-140">queuecount==0</label>
			<nail x="-178" y="-127"/>
			<nail x="-612" y="-85"/>
			<nail x="-603" y="382"/>
			<nail x="-297" y="340"/>
		</transition>
		<transition>
			<source ref="id17"/>
			<target ref="id14"/>
			<label kind="select" x="42" y="297">e: id_t</label>
			<label kind="guard" x="59" y="331">cango == 0</label>
			<label kind="synchronisation" x="25" y="357">stop[e]!</label>
			<label kind="assignment" x="-34" y="382">enqueue(e)</label>
			<nail x="42" y="331"/>
		</transition>
		<transition>
			<source ref="id20"/>
			<target ref="id14"/>
			<nail x="-416" y="306"/>
		</transition>
		<transition>
			<source ref="id21"/>
			<target ref="id14"/>
			<nail x="-297" y="229"/>
		</transition>
		<transition>
			<source ref="id19"/>
			<target ref="id20"/>
			<label kind="guard" x="-595" y="59">cango==1 &amp;&amp;
(blocks[0]==0||blocks[1]==0
||blocks[2]==0||blocks[3]==0)</label>
			<label kind="synchronisation" x="-433" y="68">stgo[front()]!</label>
			<label kind="assignment" x="-476" y="51">occBlock(front()), dequeue()</label>
		</transition>
		<transition>
			<source ref="id19"/>
			<target ref="id21"/>
			<label kind="guard" x="-297" y="102">cango==0</label>
		</transition>
		<transition>
			<source ref="id18"/>
			<target ref="id19"/>
			<label kind="assignment" x="-433" y="8">check(front())</label>
		</transition>
		<transition>
			<source ref="id11"/>
			<target ref="id18"/>
			<label kind="guard" x="-340" y="-85">(blocks[0]==1 || blocks[1]==1
||blocks[2]==1||blocks[3]==1)&amp;&amp;
queuecount&gt;0</label>
		</transition>
		<transition>
			<source ref="id11"/>
			<target ref="id14"/>
			<label kind="guard" x="34" y="-144">(blocks[0]==0
&amp;&amp;blocks[1]==0
&amp;&amp;blocks[2]==0
&amp;&amp;blocks[3]==0) &amp;&amp; carcount&gt;=0</label>
			<label kind="synchronisation" x="144" y="25">stgo[front()]!</label>
			<label kind="assignment" x="119" y="59">occBlock(front()), dequeue()</label>
			<nail x="136" y="-59"/>
			<nail x="85" y="280"/>
		</transition>
		<transition>
			<source ref="id17"/>
			<target ref="id14"/>
			<label kind="select" x="-212" y="331">e: id_t</label>
			<label kind="guard" x="-374" y="408">cango==1 &amp;&amp;
(blocks[0]==0||blocks[1]==0
||blocks[2]==0||blocks[3]==0)</label>
			<label kind="synchronisation" x="-221" y="357">go[e]!</label>
			<label kind="assignment" x="-280" y="382">occBlock(e)</label>
			<nail x="-221" y="323"/>
		</transition>
		<transition>
			<source ref="id16"/>
			<target ref="id17"/>
			<label kind="select" x="-102" y="374">e: id_t</label>
			<label kind="assignment" x="-110" y="391">check(e)</label>
			<nail x="-119" y="391"/>
		</transition>
		<transition>
			<source ref="id15"/>
			<target ref="id16"/>
			<label kind="select" x="-102" y="306">e: id_t</label>
			<label kind="synchronisation" x="-110" y="323">direction[e]?</label>
			<label kind="assignment" x="-170" y="314">cango=0</label>
		</transition>
		<transition>
			<source ref="id14"/>
			<target ref="id15"/>
			<label kind="select" x="-110" y="272">e: id_t</label>
			<label kind="synchronisation" x="-119" y="255">appr[e]?</label>
			<label kind="assignment" x="-102" y="289">approaching()</label>
		</transition>
		<transition>
			<source ref="id14"/>
			<target ref="id11"/>
			<label kind="select" x="-24" y="144">e: id_t</label>
			<label kind="synchronisation" x="-24" y="102">leave[e]?</label>
			<label kind="assignment" x="-25" y="178">carleft(e), left()</label>
			<nail x="-34" y="238"/>
			<nail x="-34" y="-25"/>
		</transition>
		<transition>
			<source ref="id13"/>
			<target ref="id14"/>
			<label kind="select" x="-102" y="161">e: id_t</label>
			<label kind="synchronisation" x="-101" y="178">go[e]!</label>
			<label kind="assignment" x="-263" y="170">occBlock(e), dequeue()</label>
		</transition>
		<transition>
			<source ref="id12"/>
			<target ref="id13"/>
			<label kind="select" x="-110" y="93">e: id_t</label>
			<label kind="synchronisation" x="-110" y="119">direction[e]?</label>
		</transition>
		<transition>
			<source ref="id11"/>
			<target ref="id12"/>
			<label kind="select" x="-102" y="8">e: id_t</label>
			<label kind="guard" x="-280" y="25">(blocks[0]==0
&amp;&amp;blocks[1]==0
&amp;&amp;blocks[2]==0
&amp;&amp;blocks[3]==0) &amp;&amp; carcount==0</label>
			<label kind="synchronisation" x="-102" y="25">appr[e]?</label>
			<label kind="assignment" x="-212" y="-8">enqueue(e),
approaching()</label>
			<nail x="-119" y="59"/>
			<nail x="-119" y="76"/>
		</transition>
	</template>
	<system>system Car, Section;</system>
	<queries>
		<query>
			<formula>A[] not deadlock</formula>
			<comment></comment>
		</query>
		<query>
			<formula></formula>
			<comment></comment>
		</query>
		<query>
			<formula></formula>
			<comment></comment>
		</query>
		<query>
			<formula></formula>
			<comment></comment>
		</query>
		<query>
			<formula></formula>
			<comment></comment>
		</query>
	</queries>
</nta>
